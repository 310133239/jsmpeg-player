{"version":3,"sources":["../src/ts.js"],"names":["JSMpeg","TS","options","bits","leftoverBytes","guessVideoFrameEnd","pidsToStreamIds","pesPacketInfo","startTime","currentTime","prototype","connect","streamId","destination","currentLength","totalLength","pts","buffers","write","buffer","byteLength","BitBuffer","has","parsePacket","leftoverCount","index","bytes","subarray","read","resync","end","transportError","payloadStart","transportPriority","pid","transportScrambling","adaptationField","continuityCounter","pi","packetComplete","adaptationFieldLength","skip","nextBytesAreStartCode","packetLength","ptsDtsFlag","headerLength","payloadBeginIndex","p32_30","p29_15","p14_0","payloadLength","packetStart","start","complete","packetAddData","hasPadding","byteIndex","i","foundSync","j","console","warn","push","STREAM","PACK_HEADER","SYSTEM_HEADER","PROGRAM_MAP","PRIVATE_1","PADDING","PRIVATE_2","AUDIO_1","VIDEO_1","DIRECTORY"],"mappings":"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","file":"ts.js","sourcesContent":["import JSMpeg from './jsmpeg';\r\n\r\nlet TS = function(options) {\r\n\tthis.bits = null;\r\n\tthis.leftoverBytes = null;\r\n\r\n\tthis.guessVideoFrameEnd = true;\r\n\tthis.pidsToStreamIds = {};\r\n\r\n\tthis.pesPacketInfo = {};\r\n\tthis.startTime = 0;\r\n\tthis.currentTime = 0;\r\n};\r\n\r\nTS.prototype.connect = function(streamId, destination) {\r\n\tthis.pesPacketInfo[streamId] = {\r\n\t\tdestination: destination,\r\n\t\tcurrentLength: 0,\r\n\t\ttotalLength: 0,\r\n\t\tpts: 0,\r\n\t\tbuffers: []\r\n\t};\r\n};\r\n\r\nTS.prototype.write = function(buffer) {\r\n\tif (this.leftoverBytes) {\r\n\t\tvar totalLength = buffer.byteLength + this.leftoverBytes.byteLength;\r\n\t\tthis.bits = new JSMpeg.BitBuffer(totalLength);\r\n\t\tthis.bits.write([this.leftoverBytes, buffer]);\r\n\t}\r\n\telse {\r\n\t\tthis.bits = new JSMpeg.BitBuffer(buffer);\r\n\t}\r\n\r\n\twhile (this.bits.has(188 << 3) && this.parsePacket()) {}\r\n\r\n\tvar leftoverCount = this.bits.byteLength - (this.bits.index >> 3);\r\n\tthis.leftoverBytes = leftoverCount > 0\r\n\t\t? this.bits.bytes.subarray(this.bits.index >> 3)\r\n\t\t: null;\r\n};\r\n\r\nTS.prototype.parsePacket = function() {\r\n\t// Check if we're in sync with packet boundaries; attempt to resync if not.\r\n\tif (this.bits.read(8) !== 0x47) {\r\n\t\tif (!this.resync()) {\r\n\t\t\t// Couldn't resync; maybe next time...\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tvar end = (this.bits.index >> 3) + 187;\r\n\tvar transportError = this.bits.read(1),\r\n\t\tpayloadStart = this.bits.read(1),\r\n\t\ttransportPriority = this.bits.read(1),\r\n\t\tpid = this.bits.read(13),\r\n\t\ttransportScrambling = this.bits.read(2),\r\n\t\tadaptationField = this.bits.read(2),\r\n\t\tcontinuityCounter = this.bits.read(4);\r\n\r\n\r\n\t// If this is the start of a new payload; signal the end of the previous\r\n\t// frame, if we didn't do so already.\r\n\tvar streamId = this.pidsToStreamIds[pid];\r\n\tif (payloadStart && streamId) {\r\n\t\tvar pi = this.pesPacketInfo[streamId];\r\n\t\tif (pi && pi.currentLength) {\r\n\t\t\tthis.packetComplete(pi);\r\n\t\t}\r\n\t}\r\n\r\n\t// Extract current payload\r\n\tif (adaptationField & 0x1) {\r\n\t\tif ((adaptationField & 0x2)) {\r\n\t\t\tvar adaptationFieldLength = this.bits.read(8);\r\n\t\t\tthis.bits.skip(adaptationFieldLength << 3);\r\n\t\t}\r\n\r\n\t\tif (payloadStart && this.bits.nextBytesAreStartCode()) {\r\n\t\t\tthis.bits.skip(24);\r\n\t\t\tstreamId = this.bits.read(8);\r\n\t\t\tthis.pidsToStreamIds[pid] = streamId;\r\n\r\n\t\t\tvar packetLength = this.bits.read(16)\r\n\t\t\tthis.bits.skip(8);\r\n\t\t\tvar ptsDtsFlag = this.bits.read(2);\r\n\t\t\tthis.bits.skip(6);\r\n\t\t\tvar headerLength = this.bits.read(8);\r\n\t\t\tvar payloadBeginIndex = this.bits.index + (headerLength << 3);\r\n\t\t\t\r\n\t\t\tvar pi = this.pesPacketInfo[streamId];\r\n\t\t\tif (pi) {\r\n\t\t\t\tvar pts = 0;\r\n\t\t\t\tif (ptsDtsFlag & 0x2) {\r\n\t\t\t\t\t// The Presentation Timestamp is encoded as 33(!) bit\r\n\t\t\t\t\t// integer, but has a \"marker bit\" inserted at weird places\r\n\t\t\t\t\t// in between, making the whole thing 5 bytes in size.\r\n\t\t\t\t\t// You can't make this shit up...\r\n\t\t\t\t\tthis.bits.skip(4);\r\n\t\t\t\t\tvar p32_30 = this.bits.read(3);\r\n\t\t\t\t\tthis.bits.skip(1);\r\n\t\t\t\t\tvar p29_15 = this.bits.read(15);\r\n\t\t\t\t\tthis.bits.skip(1);\r\n\t\t\t\t\tvar p14_0 = this.bits.read(15);\r\n\t\t\t\t\tthis.bits.skip(1);\r\n\r\n\t\t\t\t\t// Can't use bit shifts here; we need 33 bits of precision,\r\n\t\t\t\t\t// so we're using JavaScript's double number type. Also\r\n\t\t\t\t\t// divide by the 90khz clock to get the pts in seconds.\r\n\t\t\t\t\tpts = (p32_30 * 1073741824 + p29_15 * 32768 + p14_0)/90000;\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.currentTime = pts;\r\n\t\t\t\t\tif (this.startTime === -1) {\r\n\t\t\t\t\t\tthis.startTime = pts;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar payloadLength = packetLength \r\n\t\t\t\t\t? packetLength - headerLength - 3\r\n\t\t\t\t\t: 0;\r\n\t\t\t\tthis.packetStart(pi, pts, payloadLength);\r\n\t\t\t}\r\n\r\n\t\t\t// Skip the rest of the header without parsing it\r\n\t\t\tthis.bits.index = payloadBeginIndex;\r\n\t\t}\r\n\r\n\t\tif (streamId) {\r\n\t\t\t// Attempt to detect if the PES packet is complete. For Audio (and\r\n\t\t\t// other) packets, we received a total packet length with the PES \r\n\t\t\t// header, so we can check the current length.\r\n\r\n\t\t\t// For Video packets, we have to guess the end by detecting if this\r\n\t\t\t// TS packet was padded - there's no good reason to pad a TS packet \r\n\t\t\t// in between, but it might just fit exactly. If this fails, we can\r\n\t\t\t// only wait for the next PES header for that stream.\r\n\r\n\t\t\tvar pi = this.pesPacketInfo[streamId];\r\n\t\t\tif (pi) {\r\n\t\t\t\tvar start = this.bits.index >> 3;\r\n\t\t\t\tvar complete = this.packetAddData(pi, start, end);\r\n\r\n\t\t\t\tvar hasPadding = !payloadStart && (adaptationField & 0x2);\r\n\t\t\t\tif (complete || (this.guessVideoFrameEnd && hasPadding)) {\r\n\t\t\t\t\tthis.packetComplete(pi);\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tthis.bits.index = end << 3;\r\n\treturn true;\r\n};\r\n\r\nTS.prototype.resync = function() {\r\n\t// Check if we have enough data to attempt a resync. We need 5 full packets.\r\n\tif (!this.bits.has((188 * 6) << 3)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tvar byteIndex = this.bits.index >> 3;\r\n\r\n\t// Look for the first sync token in the first 187 bytes\r\n\tfor (var i = 0; i < 187; i++) {\r\n\t\tif (this.bits.bytes[byteIndex + i] === 0x47) {\r\n\r\n\t\t\t// Look for 4 more sync tokens, each 188 bytes appart\r\n\t\t\tvar foundSync = true;\r\n\t\t\tfor (var j = 1; j < 5; j++) {\r\n\t\t\t\tif (this.bits.bytes[byteIndex + i + 188 * j] !== 0x47) {\r\n\t\t\t\t\tfoundSync = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (foundSync) {\r\n\t\t\t\tthis.bits.index = (byteIndex + i + 1) << 3;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// In theory, we shouldn't arrive here. If we do, we had enough data but\r\n\t// still didn't find sync - this can only happen if we were fed garbage\r\n\t// data. Check your source!\r\n\tconsole.warn('JSMpeg: Possible garbage data. Skipping.');\r\n\tthis.bits.skip(187 << 3);\r\n\treturn false;\r\n};\r\n\r\nTS.prototype.packetStart = function(pi, pts, payloadLength) {\r\n\tpi.totalLength = payloadLength;\r\n\tpi.currentLength = 0;\r\n\tpi.pts = pts;\r\n};\r\n\r\nTS.prototype.packetAddData = function(pi, start, end) {\r\n\tpi.buffers.push(this.bits.bytes.subarray(start, end));\r\n\tpi.currentLength += end - start;\r\n\r\n\tvar complete = (pi.totalLength !== 0 && pi.currentLength >= pi.totalLength);\r\n\treturn complete;\r\n};\r\n\r\nTS.prototype.packetComplete = function(pi) {\r\n\tpi.destination.write(pi.pts, pi.buffers);\r\n\tpi.totalLength = 0;\r\n\tpi.currentLength = 0;\r\n\tpi.buffers = [];\r\n};\r\n\r\nTS.STREAM = {\r\n\tPACK_HEADER: 0xBA,\r\n\tSYSTEM_HEADER: 0xBB,\r\n\tPROGRAM_MAP: 0xBC,\r\n\tPRIVATE_1: 0xBD,\r\n\tPADDING: 0xBE,\r\n\tPRIVATE_2: 0xBF,\r\n\tAUDIO_1: 0xC0,\r\n\tVIDEO_1: 0xE0,\r\n\tDIRECTORY: 0xFF\r\n};\r\n\r\nexport default TS;\r\n\r\n\r\n\r\n"]}