{"version":3,"sources":["../../src/lib/player.js"],"names":["JSMpeg","TS","Player","url","options","cbUI","source","streaming","match","Source","WebSocket","progressive","AjaxProgressive","Ajax","maxAudioLag","loop","autoplay","demuxer","Demuxer","connect","video","Decoder","MPEG1Video","renderer","disableGl","Renderer","WebGL","IsSupported","Canvas2D","STREAM","VIDEO_1","audio","AudioOutput","WebAudio","MP2Audio","audioOut","AUDIO_1","Object","defineProperty","get","getCurrentTime","set","setCurrentTime","getVolume","setVolume","unpauseOnShow","pauseWhenHidden","document","addEventListener","showHide","bind","start","play","prototype","ev","visibilityState","wantsToPlay","pause","animationId","requestAnimationFrame","update","cancelAnimationFrame","isPlaying","canPlay","stop","seek","currentTime","volume","decodeFirstFrame","decode","destroy","time","startOffset","startTime","Now","established","renderProgress","progress","updateForStreaming","updateForStaticFile","decoded","enqueuedTime","resetEnqueuedTime","enabled","notEnoughData","headroom","decodedTime","targetTime","lateTime","frameTime","frameRate","resume","completed"],"mappings":"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","file":"player.js","sourcesContent":["import JSMpeg from './jsmpeg';\r\nimport TS from './ts';\r\n\r\n/**\r\n * @param url\r\n * @param options\r\n * @param cbUI {play: function, pause: function, stop: function} 插入UI回调\r\n * @constructor\r\n */\r\nlet Player = function (url, options, cbUI) {\r\n  this.options = options || {};\r\n  this.cbUI = cbUI || {};\r\n\r\n  if (options.source) {\r\n    this.source = new options.source(url, options);\r\n    options.streaming = !!this.source.streaming;\r\n  }\r\n  else if (url.match(/^wss?:\\/\\//)) {\r\n    this.source = new JSMpeg.Source.WebSocket(url, options);\r\n    options.streaming = true;\r\n  }\r\n  else if (options.progressive !== false) {\r\n    this.source = new JSMpeg.Source.AjaxProgressive(url, options);\r\n    options.streaming = false;\r\n  }\r\n  else {\r\n    this.source = new JSMpeg.Source.Ajax(url, options);\r\n    options.streaming = false;\r\n  }\r\n\r\n  this.maxAudioLag = options.maxAudioLag || 0.25;\r\n  this.loop = options.loop !== false;\r\n  this.autoplay = !!options.autoplay || options.streaming;\r\n\r\n  this.demuxer = new JSMpeg.Demuxer.TS(options);\r\n  this.source.connect(this.demuxer);\r\n\r\n  if (options.video !== false) {\r\n    this.video = new JSMpeg.Decoder.MPEG1Video(options);\r\n    this.renderer = !options.disableGl && JSMpeg.Renderer.WebGL.IsSupported()\r\n      ? new JSMpeg.Renderer.WebGL(options)\r\n      : new JSMpeg.Renderer.Canvas2D(options);\r\n    this.demuxer.connect(TS.STREAM.VIDEO_1, this.video);\r\n    this.video.connect(this.renderer);\r\n  }\r\n\r\n  if (options.audio !== false && JSMpeg.AudioOutput.WebAudio.IsSupported()) {\r\n    this.audio = new JSMpeg.Decoder.MP2Audio(options);\r\n    this.audioOut = new JSMpeg.AudioOutput.WebAudio(options);\r\n    this.demuxer.connect(TS.STREAM.AUDIO_1, this.audio);\r\n    this.audio.connect(this.audioOut);\r\n  }\r\n\r\n  Object.defineProperty(this, 'currentTime', {\r\n    get: this.getCurrentTime,\r\n    set: this.setCurrentTime\r\n  });\r\n  Object.defineProperty(this, 'volume', {\r\n    get: this.getVolume,\r\n    set: this.setVolume\r\n  });\r\n\r\n  this.unpauseOnShow = false;\r\n  if (options.pauseWhenHidden !== false) {\r\n    document.addEventListener('visibilitychange', this.showHide.bind(this));\r\n  }\r\n\r\n  this.source.start();\r\n\r\n  if (this.autoplay) {\r\n    this.play();\r\n  }\r\n};\r\n\r\nPlayer.prototype.showHide = function (ev) {\r\n  if (document.visibilityState === 'hidden') {\r\n    this.unpauseOnShow = this.wantsToPlay;\r\n    this.pause();\r\n  }\r\n  else if (this.unpauseOnShow) {\r\n    this.play();\r\n  }\r\n};\r\n\r\nPlayer.prototype.play = function (ev) {\r\n  this.animationId = requestAnimationFrame(this.update.bind(this));\r\n  this.wantsToPlay = true;\r\n\r\n  if (this.cbUI.play) {\r\n    this.cbUI.play();\r\n  }\r\n};\r\n\r\nPlayer.prototype.pause = function (ev) {\r\n  cancelAnimationFrame(this.animationId);\r\n  this.wantsToPlay = false;\r\n  this.isPlaying = false;\r\n\r\n  if (this.audio && this.audio.canPlay) {\r\n    // Seek to the currentTime again - audio may already be enqueued a bit\r\n    // further, so we have to rewind it.\r\n    this.audioOut.stop();\r\n    this.seek(this.currentTime);\r\n  }\r\n\r\n  if (this.cbUI.pause) {\r\n    this.cbUI.pause();\r\n  }\r\n};\r\n\r\nPlayer.prototype.getVolume = function () {\r\n  return this.audioOut ? this.audioOut.volume : 0;\r\n};\r\n\r\nPlayer.prototype.setVolume = function (volume) {\r\n  if (this.audioOut) {\r\n    this.audioOut.volume = volume;\r\n  }\r\n};\r\n\r\nPlayer.prototype.stop = function (ev) {\r\n  this.pause();\r\n  this.seek(0);\r\n  if (this.video && this.options.decodeFirstFrame !== false) {\r\n    this.video.decode();\r\n  }\r\n\r\n  if (this.cbUI.stop) {\r\n    this.cbUI.stop();\r\n  }\r\n};\r\n\r\nPlayer.prototype.destroy = function () {\r\n  this.pause();\r\n  this.source.destroy();\r\n  this.renderer.destroy();\r\n  this.audioOut.destroy();\r\n};\r\n\r\nPlayer.prototype.seek = function (time) {\r\n  var startOffset = this.audio && this.audio.canPlay\r\n    ? this.audio.startTime\r\n    : this.video.startTime;\r\n\r\n  if (this.video) {\r\n    this.video.seek(time + startOffset);\r\n  }\r\n  if (this.audio) {\r\n    this.audio.seek(time + startOffset);\r\n  }\r\n\r\n  this.startTime = JSMpeg.Now() - time;\r\n};\r\n\r\nPlayer.prototype.getCurrentTime = function () {\r\n  return this.audio && this.audio.canPlay\r\n    ? this.audio.currentTime - this.audio.startTime\r\n    : this.video.currentTime - this.video.startTime;\r\n};\r\n\r\nPlayer.prototype.setCurrentTime = function (time) {\r\n  this.seek(time);\r\n};\r\n\r\nPlayer.prototype.update = function () {\r\n  this.animationId = requestAnimationFrame(this.update.bind(this));\r\n\r\n  if (!this.source.established) {\r\n    if (this.renderer) {\r\n      this.renderer.renderProgress(this.source.progress);\r\n    }\r\n    return;\r\n  }\r\n\r\n  if (!this.isPlaying) {\r\n    this.isPlaying = true;\r\n    this.startTime = JSMpeg.Now() - this.currentTime;\r\n  }\r\n\r\n  if (this.options.streaming) {\r\n    this.updateForStreaming();\r\n  }\r\n  else {\r\n    this.updateForStaticFile();\r\n  }\r\n};\r\n\r\nPlayer.prototype.updateForStreaming = function () {\r\n  // When streaming, immediately decode everything we have buffered up until\r\n  // now to minimize playback latency.\r\n\r\n  if (this.video) {\r\n    this.video.decode();\r\n  }\r\n\r\n  if (this.audio) {\r\n    var decoded = false;\r\n    do {\r\n      // If there's a lot of audio enqueued already, disable output and\r\n      // catch up with the encoding.\r\n      if (this.audioOut.enqueuedTime > this.maxAudioLag) {\r\n        this.audioOut.resetEnqueuedTime();\r\n        this.audioOut.enabled = false;\r\n      }\r\n      decoded = this.audio.decode();\r\n    } while (decoded);\r\n    this.audioOut.enabled = true;\r\n  }\r\n};\r\n\r\nPlayer.prototype.updateForStaticFile = function () {\r\n  var notEnoughData = false,\r\n    headroom = 0;\r\n\r\n  // If we have an audio track, we always try to sync the video to the audio.\r\n  // Gaps and discontinuities are far more percetable in audio than in video.\r\n\r\n  if (this.audio && this.audio.canPlay) {\r\n    // Do we have to decode and enqueue some more audio data?\r\n    while (\r\n      !notEnoughData &&\r\n      this.audio.decodedTime - this.audio.currentTime < 0.25\r\n      ) {\r\n      notEnoughData = !this.audio.decode();\r\n    }\r\n\r\n    // Sync video to audio\r\n    if (this.video && this.video.currentTime < this.audio.currentTime) {\r\n      notEnoughData = !this.video.decode();\r\n    }\r\n\r\n    headroom = this.demuxer.currentTime - this.audio.currentTime;\r\n  }\r\n\r\n\r\n  else if (this.video) {\r\n    // Video only - sync it to player's wallclock\r\n    var targetTime = (JSMpeg.Now() - this.startTime) + this.video.startTime,\r\n      lateTime = targetTime - this.video.currentTime,\r\n      frameTime = 1 / this.video.frameRate;\r\n\r\n    if (this.video && lateTime > 0) {\r\n      // If the video is too far behind (>2 frames), simply reset the\r\n      // target time to the next frame instead of trying to catch up.\r\n      if (lateTime > frameTime * 2) {\r\n        this.startTime += lateTime;\r\n      }\r\n\r\n      notEnoughData = !this.video.decode();\r\n    }\r\n\r\n    headroom = this.demuxer.currentTime - targetTime;\r\n  }\r\n\r\n  // Notify the source of the playhead headroom, so it can decide whether to\r\n  // continue loading further data.\r\n  this.source.resume(headroom);\r\n\r\n  // If we failed to decode and the source is complete, it means we reached\r\n  // the end of our data. We may want to loop.\r\n  if (notEnoughData && this.source.completed) {\r\n    if (this.loop) {\r\n      this.seek(0);\r\n    }\r\n    else {\r\n      // this.pause();\r\n      this.stop();\r\n    }\r\n  }\r\n};\r\n\r\nexport default Player;\r\n\r\n\r\n"]}