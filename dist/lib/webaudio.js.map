{"version":3,"sources":["../../src/lib/webaudio.js"],"names":["JSMpeg","WebAudioOut","options","context","CachedContext","window","AudioContext","webkitAudioContext","gain","createGain","destination","connect","_connections","startTime","buffer","wallclockStartTime","volume","enabled","unlocked","NeedsUnlocking","Object","defineProperty","get","getEnqueuedTime","prototype","destroy","disconnect","close","play","sampleRate","left","right","ts","Now","length","value","createBuffer","getChannelData","set","source","createBufferSource","now","currentTime","duration","start","stop","Math","max","resetEnqueuedTime","unlock","callback","unlockCallback","noteOn","setTimeout","checkIfUnlocked","bind","attempt","playbackState","PLAYING_STATE","FINISHED_STATE","test","navigator","userAgent","IsSupported"],"mappings":"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","file":"webaudio.js","sourcesContent":["import JSMpeg from './jsmpeg';\r\n\r\nlet WebAudioOut = function(options) {\r\n\tthis.context = WebAudioOut.CachedContext =\r\n\t\tWebAudioOut.CachedContext ||\r\n\t\tnew (window.AudioContext || window.webkitAudioContext)();\r\n\r\n\tthis.gain = this.context.createGain();\r\n\tthis.destination = this.gain;\r\n\r\n\t// Keep track of the number of connections to this AudioContext, so we\r\n\t// can safely close() it when we're the only one connected to it.\r\n\tthis.gain.connect(this.context.destination);\r\n\tthis.context._connections = (this.context._connections || 0) + 1;\r\n\t\r\n\tthis.startTime = 0;\r\n\tthis.buffer = null;\r\n\tthis.wallclockStartTime = 0;\r\n\tthis.volume = 1;\r\n\tthis.enabled = true;\r\n\r\n\tthis.unlocked = !WebAudioOut.NeedsUnlocking();\r\n\t\r\n\tObject.defineProperty(this, 'enqueuedTime', {get: this.getEnqueuedTime});\r\n};\r\n\r\nWebAudioOut.prototype.destroy = function() {\r\n\tthis.gain.disconnect();\r\n\tthis.context._connections--;\r\n\r\n\tif (this.context._connections === 0) {\r\n\t\tthis.context.close();\r\n\t\tWebAudioOut.CachedContext = null;\r\n\t}\r\n};\r\n\r\nWebAudioOut.prototype.play = function(sampleRate, left, right) {\r\n\tif (!this.enabled) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// If the context is not unlocked yet, we simply advance the start time\r\n\t// to \"fake\" actually playing audio. This will keep the video in sync.\r\n\tif (!this.unlocked) {\r\n\t\tvar ts = JSMpeg.Now()\r\n\t\tif (this.wallclockStartTime < ts) {\r\n\t\t\tthis.wallclockStartTime = ts;\r\n\t\t}\r\n\t\tthis.wallclockStartTime += left.length / sampleRate;\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\tthis.gain.gain.value = this.volume;\r\n\r\n\tvar buffer = this.context.createBuffer(2, left.length, sampleRate);\r\n\tbuffer.getChannelData(0).set(left);\r\n\tbuffer.getChannelData(1).set(right);\r\n\r\n\tvar source = this.context.createBufferSource();\r\n\tsource.buffer = buffer;\r\n\tsource.connect(this.destination);\r\n\r\n\tvar now = this.context.currentTime;\r\n\tvar duration = buffer.duration;\r\n\tif (this.startTime < now) {\r\n\t\tthis.startTime = now;\r\n\t\tthis.wallclockStartTime = JSMpeg.Now();\r\n\t}\r\n\r\n\tsource.start(this.startTime);\r\n\tthis.startTime += duration;\r\n\tthis.wallclockStartTime += duration;\r\n};\r\n\r\nWebAudioOut.prototype.stop = function() {\r\n\t// Meh; there seems to be no simple way to get a list of currently\r\n\t// active source nodes from the Audio Context, and maintaining this\r\n\t// list ourselfs would be a pain, so we just set the gain to 0\r\n\t// to cut off all enqueued audio instantly.\r\n\tthis.gain.gain.value = 0;\r\n};\r\n\r\nWebAudioOut.prototype.getEnqueuedTime = function() {\r\n\t// The AudioContext.currentTime is only updated every so often, so if we\r\n\t// want to get exact timing, we need to rely on the system time.\r\n\treturn Math.max(this.wallclockStartTime - JSMpeg.Now(), 0)\r\n};\r\n\r\nWebAudioOut.prototype.resetEnqueuedTime = function() {\r\n\tthis.startTime = this.context.currentTime;\r\n\tthis.wallclockStartTime = JSMpeg.Now();\r\n};\r\n\r\nWebAudioOut.prototype.unlock = function(callback) {\r\n\tif (this.unlocked) {\r\n\t\tif (callback) {\r\n\t\t\tcallback();\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis.unlockCallback = callback;\r\n\t\r\n\t// Create empty buffer and play it\r\n\tvar buffer = this.context.createBuffer(1, 1, 22050);\r\n\tvar source = this.context.createBufferSource();\r\n\tsource.buffer = buffer;\r\n\tsource.connect(this.destination);\r\n\r\n  // polyfill source.start(0);\r\n  if (source.start) {\r\n    source.start(0);\r\n  }\r\n  else {\r\n    source.noteOn(0);\r\n  }\r\n\r\n\tsetTimeout(this.checkIfUnlocked.bind(this, source, 0), 0);\r\n};\r\n\r\nWebAudioOut.prototype.checkIfUnlocked = function(source, attempt) {\r\n\tif (\r\n\t\tsource.playbackState === source.PLAYING_STATE || \r\n\t\tsource.playbackState === source.FINISHED_STATE\r\n\t) {\r\n\t\tthis.unlocked = true;\r\n\t\tif (this.unlockCallback) {\r\n\t\t\tthis.unlockCallback();\r\n\t\t\tthis.unlockCallback = null;\t\r\n\t\t}\r\n\t}\r\n\telse if (attempt < 10) {\r\n\t\t// Jeez, what a shit show. Thanks iOS!\r\n\t\tsetTimeout(this.checkIfUnlocked.bind(this, source, attempt+1), 100);\r\n\t}\r\n};\r\n\r\nWebAudioOut.NeedsUnlocking = function() {\r\n\treturn /iPhone|iPad|iPod/i.test(navigator.userAgent);\r\n};\r\n\r\nWebAudioOut.IsSupported = function() {\r\n\treturn (window.AudioContext || window.webkitAudioContext);\r\n};\r\n\r\nWebAudioOut.CachedContext = null;\r\n\r\nexport default WebAudioOut;\r\n\r\n"]}